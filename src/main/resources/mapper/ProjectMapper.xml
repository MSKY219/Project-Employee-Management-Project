<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.practice.innobl.mapper.ProjectRepository">
    <sql id="employee">
        id
        , empname
        , addrmain
        , addrdetail
        , tel
        , email
        , img
        , enterat
        , resignat
        , gender
        , jobtitle
        , dept
        , empstatus
        , skill
        , grade
        , education
        , regno
    </sql>

    <sql id="project">
        id
        , pTitle
        , startat
        , endat
        , place
        , skill
        , client
        , status
    </sql>

    <sql id="commoncode">
        id
        , title
    </sql>

    <sql id="commondefinition">
        id
        , commoncode_id
        , title
    </sql>

    <sql id="pdetail">
        id
        , employee_id
        , project_id
        , status
        , startAt
        , endAt
        , role
        , deleted
    </sql>


<!--  프로젝트 등록  -->
    <insert id="saveProject" parameterType="com.practice.innobl.dto.project.ProjectRequestDto" useGeneratedKeys="true" keyProperty="id">
        insert into project(<include refid="project" />)
        values
            (
                default,
                #{pTitle},
                #{startAt},
                #{endAt},
                #{place},
                #{skill},
                #{client},
                default
            )
    </insert>

    <!--  프로젝트 목록 창 이동  -->
    <select id="getProjectList" resultType="com.practice.innobl.dto.project.ProjectResponseDto">
        select
        p.id,
        p.pTitle,
        p.startat,
        p.endat,
        p.place,
        cd1.title as client,
        cd2.title as skill,
        cd3.title as status
        from project p
        <!-- 발주처 -->
        left outer join commondefinition cd1 on (cd1.commoncode_id = 'CM70' AND p.client = cd1.id)
        <!-- 기술스택 -->
        left outer join commondefinition cd2 on (cd2.commoncode_id = 'CM50' AND p.skill = cd2.id)
        <!-- 상태 -->
        left outer join commondefinition cd3 on (cd3.commoncode_id = 'CM60' AND p.status = cd3.id)
        <where>
            <if test="status != ''">
                and p.status = #{status}
            </if>
            <if test="skill != ''">
                and p.skill = #{skill}
            </if>
            <if test="grade != ''">
                and p.client = #{grade}
            </if>
            <if test="dateStart != '' and dateEnd != ''">
                and p.startat between #{dateStart} and #{dateEnd}
            </if>
            <if test="others == 1">
                and p.pTitle like concat ('%', #{othersDetail}, '%')
            </if>
            <if test="others == 2">
                and p.place like concat ('%', #{othersDetail}, '%')
            </if>
        </where>
    </select>

    <!--  프로젝트 목록 조회 시, 페이징을 위한 숫자 조회  -->
    <select id="getListCount" resultType="_int">
        select count(p.id)
        from project p
        <where>
            <if test="status != ''">
                and p.status = #{status}
            </if>
            <if test="skill != ''">
                and p.skill = #{skill}
            </if>
            <if test="grade != ''">
                and p.client = #{grade}
            </if>
            <if test="dateStart != '' and dateEnd != ''">
                and p.startat between #{dateStart} and #{dateEnd}
            </if>
            <if test="others == 1">
                and p.pTitle like concat ('%', #{othersDetail}, '%')
            </if>
            <if test="others == 2">
                and p.place like concat ('%', #{othersDetail}, '%')
            </if>
        </where>
    </select>


    <!--  프로젝트 상태 수정  -->
    <update id="updateSt" parameterType="com.practice.innobl.dto.project.ProjectRequestDto">
        update project
        set status = #{status}
        where id = #{id}
    </update>

    <!--  프로젝트 상세 조회  -->
    <select id="getProjectDetail" resultType="com.practice.innobl.dto.project.ProjectResponseDto">
        select
        p.id,
        p.pTitle,
        p.startat,
        p.endat,
        p.place,
        cd1.title as client,
        cd2.title as skill,
        cd3.title as status
        from project p
        <!-- 발주처 -->
        left outer join commondefinition cd1 on (cd1.commoncode_id = 'CM70' AND p.client = cd1.id)
        <!-- 기술스택 -->
        left outer join commondefinition cd2 on (cd2.commoncode_id = 'CM50' AND p.skill = cd2.id)
        <!-- 상태 -->
        left outer join commondefinition cd3 on (cd3.commoncode_id = 'CM60' AND p.status = cd3.id)
        where p.id = #{id}
    </select>

    <!--  프로젝트 정보 수정  -->
    <update id="updateProject" parameterType="com.practice.innobl.dto.project.ProjectRequestDto">
        update project
        set
        pTitle = #{pTitle}
        , startat = #{startAt}
        , endat = #{endAt}
        , place = #{place}
        , skill = #{skill}
        , client = #{client}
        , status = #{status}
        where id = #{id}
    </update>


    <!--  프로젝트 직원 추가  -->
    <insert id="addEmp" parameterType="com.practice.innobl.dto.project.AddEmpRequestDto" useGeneratedKeys="true" keyProperty="id">
        insert into pdetail(<include refid="pdetail" />)
        values
        (
            default,
            #{employeeId},
            #{projectId},
            default,
            null,
            null,
            default,
            default
        )
    </insert>

    <!--  직원 목록 창 이동  -->
    <select id="getEmpList" resultType="com.practice.innobl.dto.emp.EmpResponseDto">
        select
        e.id,
        e.empname,
        e.addrmain,
        e.addrdetail,
        e.tel,
        e.email,
        e.img,
        e.enterat,
        e.resignat,
        cd1.title as gender,
        cd2.title as jobtitle,
        cd3.title as dept,
        cd4.title as empstatus,
        cd5.title as skill,
        cd6.title as grade,
        cd7.title as education,
        regno
        from employee e
        left outer join pdetail pd on e.id = pd.employee_id
        <!-- 성별 -->
        left outer join commondefinition cd1 on (cd1.commoncode_id = 'CM10' AND e.gender = cd1.id)
        <!-- 직책 -->
        left outer join commondefinition cd2 on (cd2.commoncode_id = 'CM20' AND e.jobtitle = cd2.id)
        <!-- 부서 -->
        left outer join commondefinition cd3 on (cd3.commoncode_id = 'CM30' AND e.dept = cd3.id)
        <!-- 직원상태 -->
        left outer join commondefinition cd4 on (cd4.commoncode_id = 'CM40' AND e.empstatus = cd4.id)
        <!-- 기술스택 -->
        left outer join commondefinition cd5 on (cd5.commoncode_id = 'CM50' AND e.skill = cd5.id)
        <!-- 등급 -->
        left outer join commondefinition cd6 on (cd6.commoncode_id = 'CM80' AND e.grade = cd6.id)
        <!-- 학력 -->
        left outer join commondefinition cd7 on (cd7.commoncode_id = 'CM90' AND e.education = cd7.id)
        <where>
            <if test="status != ''">
                and e.empstatus = #{status}
            </if>
            <if test="skill != ''">
                and e.skill = #{skill}
            </if>
            <if test="grade != ''">
                and e.grade = #{grade}
            </if>
            <if test="dateStart != '' and dateEnd != ''">
                and e.enterat between #{dateStart} and #{dateEnd}
            </if>
            <if test="others == 1">
                and e.empname like concat ('%', #{othersDetail}, '%')
            </if>
            <if test="others == 2">
                and e.tel like concat ('%', #{othersDetail}, '%')
            </if>
            <if test="others == 3">
                and e.email like concat ('%', #{othersDetail} '%')
            </if>
            <if test="projectId != ''">
                and (pd.project_id is not null and ((pd.project_id like #{projectId}) and pd.deleted = 'N'))
            </if>
        </where>
        order by e.id asc
    </select>

    <!--  직원 목록 조회 시, 페이징을 위한 숫자 조회  -->
    <select id="getEmpListCount" resultType="_int">
        select count(e.id)
        from employee e
        left outer join pdetail pd on e.id = pd.employee_id
        <where>
            <if test="status != ''">
                and e.empstatus = #{status}
            </if>
            <if test="skill != ''">
                and e.skill = #{skill}
            </if>
            <if test="grade != ''">
                and e.grade = #{grade}
            </if>
            <if test="dateStart != '' and dateEnd != ''">
                and e.enterat between #{dateStart} and #{dateEnd}
            </if>
            <if test="others == 1">
                and e.empname like concat ('%', #{othersDetail}, '%')
            </if>
            <if test="others == 2">
                and e.tel like concat ('%', #{othersDetail}, '%')
            </if>
            <if test="others == 3">
                and e.email like concat ('%', #{othersDetail} '%')
            </if>
            <if test="projectId != ''">
                and (pd.project_id is not null and ((pd.project_id like #{projectId}) and pd.deleted = 'N'))
            </if>
        </where>
        order by e.id asc
    </select>

    <!-- 프로젝트 참여 직원 삭제 -->
    <delete id="deleteEmp" parameterType="com.practice.innobl.dto.project.AddEmpRequestDto">
        delete from pdetail
        where
        employee_id = #{employeeId}
        and project_id = #{projectId}
    </delete>
</mapper>