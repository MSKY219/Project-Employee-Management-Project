<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.practice.innobl.mapper.EmpRepository">

    <sql id="employee">
        id
        , empname
        , addrmain
        , addrdetail
        , tel
        , email
        , img
        , enterat
        , resignat
        , gender
        , jobtitle
        , dept
        , empstatus
        , skill
        , grade
        , education
        , regno
    </sql>

    <sql id="commoncode">
        id
        , title
    </sql>

    <sql id="commondefinition">
        id
        , commoncode_id
        , title
    </sql>

    <sql id="project">
        id
        , pTitle
        , startat
        , endat
        , place
        , skill
        , client
        , status
    </sql>

    <sql id="pdetail">
        id
        , employee_id
        , project_id
        , status
        , startAt
        , endAt
        , role
        , deleted
    </sql>

    <!--  직원 목록 창 이동  -->
    <select id="getEmpList" resultType="com.practice.innobl.dto.emp.EmpResponseDto">
        select
        distinct
        e.id,
        e.empname,
        e.addrmain,
        e.addrdetail,
        e.tel,
        e.email,
        e.img,
        e.enterat,
        e.resignat,
        cd1.title as gender,
        cd2.title as jobtitle,
        cd3.title as dept,
        cd4.title as empstatus,
        cd5.title as skill,
        cd6.title as grade,
        cd7.title as education,
        regno
        from employee e
        <!-- 성별 -->
        left outer join commondefinition cd1 on (cd1.commoncode_id = 'CM10' AND e.gender = cd1.id)
        <!-- 직책 -->
        left outer join commondefinition cd2 on (cd2.commoncode_id = 'CM20' AND e.jobtitle = cd2.id)
        <!-- 부서 -->
        left outer join commondefinition cd3 on (cd3.commoncode_id = 'CM30' AND e.dept = cd3.id)
        <!-- 직원상태 -->
        left outer join commondefinition cd4 on (cd4.commoncode_id = 'CM40' AND e.empstatus = cd4.id)
        <!-- 기술스택 -->
        left outer join commondefinition cd5 on (cd5.commoncode_id = 'CM50' AND e.skill = cd5.id)
        <!-- 등급 -->
        left outer join commondefinition cd6 on (cd6.commoncode_id = 'CM80' AND e.grade = cd6.id)
        <!-- 학력 -->
        left outer join commondefinition cd7 on (cd7.commoncode_id = 'CM90' AND e.education = cd7.id)
        left outer join pdetail pd on e.id = pd.employee_id
        <where>
            <if test="status != ''">
                and e.empstatus = #{status}
            </if>
            <if test="skill != ''">
                and e.skill = #{skill}
            </if>
            <if test="grade != ''">
                and e.grade = #{grade}
            </if>
            <if test="dateStart != '' and dateEnd != ''">
                and e.enterat between #{dateStart} and #{dateEnd}
            </if>
            <if test="others == 1">
                and e.empname like concat ('%', #{othersDetail}, '%')
            </if>
            <if test="others == 2">
                and e.tel like concat ('%', #{othersDetail}, '%')
            </if>
            <if test="others == 3">
                and e.email like concat ('%', #{othersDetail} '%')
            </if>
            <if test="projectId != ''">
                and (pd.project_id is null or (pd.project_id not like #{projectId} AND pd.deleted = 'N' and (e.id not in (select distinct employee_id FROM pdetail WHERE project_id = #{projectId}))) and e.empstatus != '4')
            </if>
        </where>
    </select>

    <!--  직원 목록 조회 시, 페이징을 위한 숫자 조회  -->
    <select id="getListCount" resultType="_int">
        select distinct count(e.id)
        from employee e
        left outer join pdetail pd on e.id = pd.employee_id
        <where>
            <if test="status != ''">
                and e.empstatus = #{status}
            </if>
            <if test="skill != ''">
                and e.skill = #{skill}
            </if>
            <if test="grade != ''">
                and e.grade = #{grade}
            </if>
            <if test="dateStart != '' and dateEnd != ''">
                and e.enterat between #{dateStart} and #{dateEnd}
            </if>
            <if test="others == 1">
                and e.empname like concat ('%', #{othersDetail}, '%')
            </if>
            <if test="others == 2">
                and e.tel like concat ('%', #{othersDetail}, '%')
            </if>
            <if test="others == 3">
                and e.email like concat ('%', #{othersDetail} '%')
            </if>
            <if test="projectId != ''">
                and (pd.project_id is null or (pd.project_id not like #{projectId} AND pd.deleted = 'N' and (e.id not in (select distinct employee_id FROM pdetail WHERE project_id = #{projectId})))and e.empstatus != '4')
            </if>
        </where>
    </select>

    <!--  직원 상태 수정  -->
    <update id="updateSt" parameterType="com.practice.innobl.dto.emp.EmpRequestDto">
        update employee
        set empstatus = #{empStatus}
        where id = #{id}
    </update>

    <!--  등록 창 이동시 필요 정보 가지고 오기  -->
    <select id="getAddOptions" resultType="com.practice.innobl.dto.commoncode.CommondefinitionDto">
        select
        c.id,
        c.commoncode_id,
        c.title
        from commondefinition as c
        join commoncode as e
        on e.id = c.commoncode_id
        order by
        length(commoncode_id),
        c.commoncode_id ASC, length(c.id),
        c.id ASC
    </select>

    <!--  직원 등록  -->
    <insert id="saveEmp" parameterType="com.practice.innobl.dto.emp.EmpRequestDto" useGeneratedKeys="true"
            keyProperty="id">
        insert into employee(<include refid="employee"/>)
        values
        (
        default,
        #{empName},
        #{addrMain},
        #{addrDetail},
        #{tel},
        #{email},
        #{img},
        #{enterAt},
        default,
        #{gender},
        #{jobTitle},
        #{dept},
        default,
        #{skill},
        #{grade},
        #{education},
        #{regNo}
        )
    </insert>

    <!--  직원 등록 및 수정 시, 이메일 중복 확인  -->
    <select id="checkEmail" parameterType="string" resultType="_int">
        select count(e.email)
        from employee e
        where e.email = #{email}
        <if test="id != '' || id != null">
            and e.id != #{id}
        </if>
    </select>


    <!--  직원 상세내역 조회  -->
    <select id="empDetail" resultType="com.practice.innobl.dto.emp.EmpResponseDto">
        select
        e.id,
        e.empname,
        e.addrmain,
        e.addrdetail,
        e.tel,
        e.email,
        e.img,
        e.enterat,
        e.resignat,
        cd1.title as gender,
        cd2.title as jobtitle,
        cd3.title as dept,
        cd4.title as empstatus,
        cd5.title as skill,
        cd6.title as grade,
        cd7.title as education,
        regno
        from employee e
        <!-- 성별 -->
        left outer join commondefinition cd1 on (cd1.commoncode_id = 'CM10' AND e.gender = cd1.id)
        <!-- 직책 -->
        left outer join commondefinition cd2 on (cd2.commoncode_id = 'CM20' AND e.jobtitle = cd2.id)
        <!-- 부서 -->
        left outer join commondefinition cd3 on (cd3.commoncode_id = 'CM30' AND e.dept = cd3.id)
        <!-- 직원상태 -->
        left outer join commondefinition cd4 on (cd4.commoncode_id = 'CM40' AND e.empstatus = cd4.id)
        <!-- 기술스택 -->
        left outer join commondefinition cd5 on (cd5.commoncode_id = 'CM50' AND e.skill = cd5.id)
        <!-- 등급 -->
        left outer join commondefinition cd6 on (cd6.commoncode_id = 'CM80' AND e.grade = cd6.id)
        <!-- 학력 -->
        left outer join commondefinition cd7 on (cd7.commoncode_id = 'CM90' AND e.education = cd7.id)
        where e.id = #{id}
    </select>

    <!--  직원 정보 수정  -->
    <update id="updateEmp" parameterType="com.practice.innobl.dto.emp.EmpRequestDto">
        update employee
        set
        empname = #{empName}
        , addrmain = #{addrMain}
        , addrdetail = #{addrDetail}
        , tel = #{tel}
        , email = #{email}
        , img = #{img}
        , enterat = #{enterAt}
        , gender = #{gender}
        , jobtitle = #{jobTitle}
        , dept = #{dept}
        , empstatus = #{empStatus}
        , skill = #{skill}
        , grade = #{grade}
        , education = #{education}
        , regno = #{regNo}
        where id = #{id}
    </update>

    <!--  이미지 삭제 시, 사용할 현재 이미지 목록 조회  -->
    <select id="getImgList" resultType="string">
        select e.img
        from employee e
    </select>

    <!--  직원 상세내역 참여 프로젝트  -->
    <select id="getEmpProjectList" resultType="com.practice.innobl.dto.project.ProjectResponseDto">
        select
        pd.id,
        p.id as pId,
        p.pTitle,
        cd1.title as client,
        pd.startAt,
        pd.endAt,
        p.place,
        cd2.title as role,
        cd3.title as skill
        from pdetail pd
        join project p on pd.project_id = p.id
        join commondefinition cd1 on (cd1.commoncode_id = 'CM70' and p.client = cd1.id)
        join commondefinition cd2 on (cd2.commoncode_id = 'CM100' and pd.role = cd2.id)
        join commondefinition cd3 on (cd3.commoncode_id = 'CM50' and p.skill = cd3.id)
        where employee_id = #{id}
        order by pd.id asc
    </select>

    <!--  직원 상세내역 조회 시, 참여 프로젝트 수 조회  -->
    <select id="getEmpProjectCount" resultType="_int">
        select count(pd.id)
        from pdetail pd
        where pd.employee_id = #{id}
    </select>

    <!--  직원 등록 및 수정 시, 이메일 중복 확인  -->
    <select id="getEditListCount" parameterType="string" resultType="_int">
        select count(pd.id)
        from pdetail pd
        where pd.project_id = #{projectId}
    </select>

    <!--  프로젝트 팝업창 직원 정보 수정 목록 조회  -->
    <select id="getEditList" resultType="com.practice.innobl.dto.project.ProjectResponseDto">
        select
        e.empname as empName,
        cd4.title as jobTitle,
        cd5.title as grade,
        cd3.title as skill,
        cd1.title as client,
        cd2.title as role,
        pd.startAt,
        pd.endAt,
        cd6.title as status
        from pdetail pd
        join project p on pd.project_id = p.id
        join employee e on pd.employee_id = e.id
        join commondefinition cd1 on (cd1.commoncode_id = 'CM70' and p.client = cd1.id)
        join commondefinition cd2 on (cd2.commoncode_id = 'CM100' and pd.role = cd2.id)
        join commondefinition cd3 on (cd3.commoncode_id = 'CM50' and e.skill = cd3.id)
        join commondefinition cd4 on (cd4.commoncode_id = 'CM20' AND e.jobtitle = cd4.id)
        join commondefinition cd5 on (cd5.commoncode_id = 'CM80' AND e.grade = cd5.id)
        join commondefinition cd6 on (cd6.commoncode_id = 'CM40' AND e.empstatus = cd6.id)
        where project_id = #{projectId}
    </select>


</mapper>